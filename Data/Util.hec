# Utility rules go here

# Set up the pronouns for an entity
set_pronouns E Type => "", Type == "male", let E.he = "he", let E.him = "him", let E.his = "his", let E.he_s = "he's", let E.is = "is", let E.was = "was"
set_pronouns E Type => "", Type == "female", let E.he = "she", let E.him = "her", let E.his = "her", let E.he_s = "she's", let E.is = "is", let E.was = "was"
set_pronouns E Type => "", Type == "neutral", let E.he = "they", let E.him = "them", let E.his = "their", let E.he_s = "they're", let E.is = "are", let E.was = "were"
set_pronouns E Type => "", Type == "object", let E.he = "it", let E.him = "it", let E.his = "its", let E.he_s = "it's", let E.is = "is", let E.was = "was"

# Return a variation on the name of the entity
name E => "[E.name]", last_mentioned_actor != E.name, let last_mentioned_actor = E.name
name E => "[E.he]", last_mentioned_actor == E.name, let last_mentioned_actor = E.name
name E => "[E.name]", E.location != null
name E => "the [E.type]", E.location != null
name E => "[E.name.full]", E.location != null



# Get the employer or create them if they don't exist
employer => "[=>name(plot.employer)]", plot.employer != null
employer => "[=>create_employer][=>employer]", plot.employer == null
create_employer => "[=>create_random_actor(plot.employer)]", let plot.employer

# Get the site or create it if it doesn't exist
site => "[=>name(plot.site)]", plot.site != null
site => "[=>create_site][=>site]", plot.site == null
create_site => "[=>create_random_location(plot.site)]", let plot.site

# Get the letter type or create it if it doesn't exist
letter_type => "[plot.call.type]", plot.call.type != null
letter_type => "a letter", plot.call.type == null, let plot.call.type = "a letter"
letter_type => "a note", plot.call.type == null, let plot.call.type = "a note"

