# Contains all parts of scenes that are used to compose the master plot


# Scenes
# 1 - Hook
introduction => "The [agency.name.full]. [=>home_sweet_home]"
foreshadow => "[=>subplot_intro] [=>subplot_problem] [=>subplot_solution]"
call => "[=>get_job] [=>emote_negative] [=>job_intro]"

# 2 - Investigation
arrival_to_scene => "[=>arrive_site][=>update_location(plot.site)] [=>enter_site]"
evidence_collection => "[=>wax_on_site] [=>time_for_work] [=>set_up_bag] [=>examine_evidence]"
hypothesis => "[=>deduce_demon] [=>wax_on_deduction] [=>make_plan]"

# 3, 5 - Plan fails
plan_fire => "[=>probe_situation] [=>determination] [=>attempt_plan]"
plan_problem => "[=>problem_appears] [=>problem_is_bad] [=>problem_is_impossible]"
plan_failure => "[=>problem_hits] [=>status_change] [=>new_situation]"

# 4, 6 - New plan
assess_situation => "[=>describe_situation] [=>emote_negative] [=>silver_lining]"
plan_debate => "[=>consider_situation] [=>consider_options] [=>despair]"
plan_decision => "[=>need_to_focus] [=>moment_of_clarity] [=>make_plan]"

# 7 - Miracle save
plan_success => "[=>problem_averted] [=>plan_succeeds] [=>victory]"

# 8 - Epilogue
clean_up => "[=>future_of_job] [=>job_good_sides] [=>job_bad_sides]"
look_back => "[=>rewards] [=>subplot_outro] [=>why_go_on]"
final_judgement => "[=>must_go_on] [=>just_another_day] [=>fade_to_black]"



# Phrases
arrive_site +> let plot.inside = null
=> "I walk up to [=>site]."
=> "I walk to [=>site]."
=> "I arrive at [=>site]."
=> "I take a cab to [=>site]."
=> "I stop outside [=>site]."
attempt_plan
=> "I begin drawing a large circle on the [=>floor].", plot.plan == "circle", plot.inside != null
=> "I take a stance and ready myself for an assault.", plot.plan == "attack"
=> "I begin preparing the receptacle to hold [=>demon].", plot.plan == "bind"
=> "I prepare myself for unmooring [=>demon] from its anchor points.", plot.plan == "uproot"
=> "I grab a piece of copper cord and connect it to a void anchor.", plot.plan == "drain"
=> "I grab a piece of exposed wiring, its end bristling with electricity.", plot.plan == "overload"
caller 
=> "It's [=>employer]. [^=>name(plot.employer)] [plot.employer.is] in a hurry."
=> "It's [=>employer]. [^=>name(plot.employer)] sounds urgent."
=> "It's [=>employer]. [^=>name(plot.employer)] sounds hopeless."
=> "It's [=>employer]."
consider_options
=> "Maybe I can try to overpower it somehow?" flags.plan.attack == null, flag consider_attack
=> "Maybe I could try and improvise a containment circle and trap it?" flags.plan.circle == null, flag consider_circle
=> "Maybe I could bind it?", flags.plan.bind == null, flag consider_bind
=> "Maybe I could destroy the loci anchoring it to this world?", flags.plan.uproot == null, flag consider_uproot
=> "Maybe I could drain it of its power somehow?", flags.plan.drain == null, flag consider_drain
=> "Maybe I could overload it with electricity?", flags.plan.overload == null, flag consider_overload
=> "Maybe it will just go away on its own? One can only hope.", flag consider_hope
=> "My options seem hopeless.", flag consider_hopeless
consider_situation
=> "Okay, got to [=>think]. [=>what_now] [=>look_around]"
=> "Okay, I need to [=>think]. [=>look_around] [=>what_now]"
deduce_demon
=> "The scene suggests a not-too-bright [=>demon].", plot.demon.type == "brute"
=> "It seems to be a violent but not too clever.", plot.demon.type == "brute"
=> "It's obvious we're dealing with a demonic swarm.", plot.demon.type == "swarm"
=> "This must be the work of a swarm demon.", plot.demon.type == "swarm"
=> "Obviously [=>demon] is more cunning than average.", plot.demon.type == "trickster"
=> "[^=>demon] must be more subtle than your average demon.", plot.demon.type == "trickster"
describe_situation
=> "I find myself trapped outside.", plot.situation == "trapped", plot.inside == null
=> "I find myself trapped in a small room.", plot.situation == "trapped", plot.inside != null
=> "I find myself locked into a side room.", plot.situation == "trapped", plot.inside != null
=> "I run like a madman, scrambling over [=>furniture(plot.site)].", plot.situation == "chased"
=> "I weave and scramble, knocking over [=>furniture(plot.site)].", plot.situation == "chased"
=> "I check my [plot.injury]. It's bad.", plot.situation == "injured"
=> "I check my [plot.injury]. It doesn't look too good.", plot.situation == "injured"
=> "I grope around in the dark.", plot.situation == "darkness"
=> "I stumble in the dark.", plot.situation == "darkness"
=> "I find myself without my gear.", plot.situation == "stolen"
=> "Facing a demon with no gear. Great.", plot.situation == "stolen"
=> "I'm rolling on the floor, holding my head between my hands.", plot.situation == "stunned"
=> "My head spins as I try to regain control.", plot.situation == "stunned"
despair +> this.count < story_index
=> "Oh this is just hopeless."
=> "No, that won't work."
=> "Could work. If I get lucky."
=> "All of my options at this point just seem bleak."
=> "I don't think I can do this."
=> "How am I supposed to do this?"
determination +> this.count < story_index
=> "Time to kick some demon ass."
=> "This has to work."
=> "This is my last chance."
=> "I pray that this will work."
=> "This has got to work."
=> "I need this to work."
employer_enters
=> "comes to my office"
=> "steps in the door"
=> "enters my office"
employer_explains
=> "lays out"
=> "tells me"
=> "explains"
employer_visits
=> "[=>employer] [=>employer_enters] and [=>employer_explains] [plot.employer.his] problems."
enter_site +> let plot.inside = plot.site.interior
=> "[^=>emote_negative] I go in.", plot.site.interior != null
=> "[^=>emote_negative] I step inside.", plot.site.interior != null
=> "[^=>emote_negative] I cross the fence.", plot.site.interior == null
=> "I inspect the lock. Basic model. A few minutes work. I'm in."
=> "I crack the lock quietly and step through."
evidence_type
=> "I can see large claw marks covering the [plot.site.type]", plot.demon.type == "brute"
=> "the [plot.site.type] is totally trashed", plot.demon.type == "brute"
=> "thousands of tiny tracks criss-cross across all imaginable surfaces of the [plot.site.type]", plot.demon.type == "swarm"
=> "hundreds of tiny holes dot the [plot.site.type]", plot.demon.type == "swarm"
=> "the [plot.site.type] stands in suspiciously good condition", plot.demon.type == "trickster"
=> "curious symbols mar the [plot.site.type]", plot.demon.type == "trickster"
evidence_flavour
=> "the air smells of traces of copper or iron", plot.demon.flavour == "construct"
=> "small rusted flakes cover the [=>floor]", plot.demon.flavour == "construct"
=> "tiny arcs of electricity dance on all metallic surfaces", plot.demon.flavour == "ethereal"
=> "faint whispers emanate from dark corners", plot.demon.flavour == "ethereal"
=> "a faint smell of formaldehyde lingers in the place", plot.demon.flavour == "possessed"
=> "blackish ichor is pooled on the [=>floor]", plot.demon.flavour == "possessed"
examine_evidence 
=> "[=>look_around] [^=>evidence_type] and [=>evidence_flavour]."
=> "[=>look_around] [^=>evidence_flavour] and [=>evidence_type]."
fade_to_black
=> "I [=>fade_begin] [=>fade_end]."
=> "I hail a cab and [=>fade_begin] [=>fade_end]."
fade_begin
=> "disappear into"
=> "fade into"
=> "step into"
fade_end
=> "the city"
=> "the night"
=> "the fog"
=> "the rain"
=> "the sunrise"
future_of_job
=> "The situation at [=>site] should be under control now."
=> "[^=>site] quickly gets up on its feet."
=> "[^=>site] is opened for business soon after."
get_job
=> "[=>phone_rings] [=>caller]", let plot.call = "phone"
=> "[=>letter_arrives]", let plot.call = "letter"
=> "[=>employer_visits]", let plot.call = "visit"
home_sweet_home
=> "It's not perfect but it's home."
=> "No place like home."
=> "There's no place like home."
job_bad_sides
=> "But that was way too close."
=> "But that was not what I would call an ideal execution."
=> "But that didn't at all go according to plan."
job_good_sides
=> "Well, it wasn't as bad as it could have been."
=> "Well, at least I'm still [=>alive]."
=> "Well, at least I'm not [=>dead]."
=> "Now I can tend to my injuries.", plot.injury != null
job_intro 
=> "[=>tough_case] I don't savour the idea of visiting [=>site] again.", let plot.job = "job"
=> "[=>tough_case] [^plot.employer.he] really needs my help. I guess I don't have a choice. I'm going to [=>site].", let plot.job = "help"
=> "[=>tough_case] [^plot.employer.he] will owe me after this. I get ready to leave for [=>site].", let plot.job = "favor"
just_another_day
=> "Oh well. Just another day in the life."
=> "Oh well. Life goes on."
letter_arrives 
=> "I look back at the [=>letter_type] from [=>employer]."
=> "A [=>letter_type] arrives from [=>employer]."
=> "I dig up the [=>letter_type] from [=>employer]."
look_around
=> "I look around."
=> "I examine my surroundings."
=> "I examine the situation."
=> "I consider the situation."
make_plan
=> "All I need to do is set up a barrier circle so I can contain [=>demon].", flag plan.circle, let plot.plan = "circle"
=> "I have to first weaken [=>demon] with an electric assault before I can properly banish it.", flag plan.attack, let plot.plan = "attack"
=> "I should be able to bind [=>demon] to this vessel.", flag plan.bind, let plot.plan = "bind"
=> "I have to weaken the place that anchors [=>demon] to our world.", flag plan.uproot, let plot.plan = "uproot"
=> "I could drain the power from [=>demon] if I can ground it.", flag plan.drain, let plot.plan = "drain"
=> "I might be able to overload [=>demon] if I can connect it to the power grid.", flag plan.overload, let plot.plan = "overload"
moment_of_clarity
=> "It hits me like [=>hits_like]."
=> "The realization hits me like [=>hits_like]."
=> "Okay, I think I got it."
=> "Right. I have a plan."
=> "Right."
must_go_on
=> "I suppose it has to be done."
=> "I suppose someone has to do it. Might as well be me."
=> "I suppose it's the only thing I'm even remotely good at."
=> "I suppose it's the only thing I know how to do."
=> "I suppose it pays the bills. Except when it doesn't."
need_a_job
=> "I need a job."
=> "I need a job. Fast."
=> "I need a job. And I need it fast."
=> "I need a job, desperately."
need_to_focus
=> "Okay, I need to [=>think]."
=> "I really need to [=>think]."
=> "Right. I need to [=>think]."
=> "Just [=>think]."
new_situation
=> "I tumble across the [=>floor] and crumble into a heap.", plot.situation == "trapped"
=> "I run and swerve as I desperately think of some way to evade [=>demon] behind me.", plot.situation == "chased"
=> "My [plot.injury] hurts like the dickens. I check my injury.", plot.situation == "injured"
=> "I can't see anything in this darkness.", plot.situation == "darkness"
=> "I double-check my pockets. Yep. All empty.", plot.situation == "stolen"
=> "I fall down on the [=>floor] and reel in pain.", plot.situation == "stunned"
=> "I'm in deep trouble."
=> "This hasn't gone at all according to plan."
plan_succeeds
=> "I smash it between the eyes! It reels in pain.", plot.plan == "attack"
=> "I complete the circle and it's trapped within!", plot.plan == "circle"
=> "I show it the vessel and it is mesmerized by the item!", plot.plan == "bind"
=> "I grab the last anchor point with my bare hands.", plot.plan == "uproot"
=> "I jab the grounding wire into its eyes.", plot.plan == "drain"
=> "I block its attack with the live wire and electricity courses through [=>demon]!", plot.plan == "overload"
probe_situation
=> "I clear some space for the circle.", plot.plan == "circle"
=> "I take the electric brand from my pocket.", plot.plan == "attack", plot.stolen == null
=> "I raise my fists.", plot.plan == "attack"
=> "I fish out a suitable receptacle from my pockets.", plot.plan == "bind", plot.stolen == null
=> "I fashion a makeshift receptacle from scrap.", plot.plan == "bind"
=> "I locate the anchor points.", plot.plan == "uproot"
=> "I connect a piece of wire to a piece of plumbing. That should be grounded properly now.", plot.plan == "drain"
=> "I grab a loose live wire hanging from the wall by the safe part.", plot.plan == "overload"
=> "I reach for my bag for my tools.", plot.stolen == null
=> "I steady my breath."
problem_appears
=> "I hear it too late. A loud [=>demon_sound] comes from behind me and chills me to the bone."
=> "I haven't even finished the first layer of the circle when [=>demon] appears.", plot.plan == "circle"
=> "[^=>demon] shows itself and I start to second guess a full-on assault.", plot.plan == "attack"
=> "I've barely finished preparing the receptacle when [=>demon] appears.", plot.plan == "bind"
=> "I've managed to destroy all anchors but one when [=>demon] attacks.", plot.plan == "uproot"
=> "I haven't even tested the grounding as [=>demon] pounces on me.", plot.plan == "drain"
=> "The wire sizzles as a tell-tale sign of [=>demon] drawing near.", plot.plan == "overload"
problem_averted
=> "I dodge its gigantic [=>demon_weapon] and [=>maneuver] it.", plot.demon.type == "brute"
=> "I [=>maneuver] a wave of demonic critters and it crashes into the [=>floor].", plot.demon.type == "swarm"
=> "I fake out [=>demon] and [=>maneuver] it.", plot.demon.type == "trickster"
problem_hits
=> "[^=>demon] punches me right through a plaster wall.", plot.demon.type == "brute", plot.inside != null, let plot.situation = "breach"
=> "I hit [=>demon] with all my might. It only makes it angrier.", plot.plan == "attack", let plot.situation = "menace"
=> "The whirling swarm completely overruns me and I get swept along the tide of demon matter.", plot.demon.type == "swarm", let plot.situation = "breach"
=> "[^=>demon] cracks my circle in half, erasing all hope of using it to destroy it.", plot.plan == "circle", let plot.situation = "menace"
=> "[^=>demon] crushes the only viable receptacle with its [=>demon_weapon].", plot.plan == "bind", let plot.situation = "menace"
=> "[^=>demon] flings me through the door before I have a chance to finish unmooring it.", plot.demon.type != "swarm", plot.plan == "uproot", let plot.situation = "breach"
=> "[^=>demon] carries me through the door before I have a chance to finish unmooring it.", plot.demon.type == "swarm", plot.plan == "uproot", let plot.situation = "breach"
=> "I try and drain [=>demon], but find the grounding is all wrong. [^=>demon] is not even phased.", plot.plan == "drain", let plot.situation = "menace"
=> "I zap [=>demon], but it only slows it down for a second before the power fails and sparks fly from the wires as a fuse busts broken.", plot.plan == "overload", let plot.situation = "menace"
=> "[^=>demon] creates multiple illusionary copies of itself, leaving me wondering which is the original.", plot.demon.type == "trickster", let plot.situation = "illusion"
=> "[^=>demon] disappears into the shadows. I hear it snickering.", plot.demon.type == "trickster", let plot.situation = "ambush"
=> "[^=>demon] crawls all over the wiring, making sparks fly.", plot.demon.type == "swarm", let plot.situation = "glitch"
=> "[^=>demon] covers all light sources in the room, leaving it in darkness.", plot.demon.type == "swarm", let plot.situation = "darkness"
=> "[^=>demon]'s hind muscles flex as it charges straight at me.", plot.demon.type == "brute", let plot.situation = "pounce"
=> "[^=>demon] smashes the wall, making sparks fly from the exposed wiring.", plot.demon.type == "brute", let plot.situation = "glitch"
=> "The unfinished circle breaks as the demon jumps at me and scrapes the [=>floor] with its claws.", plot.plan == "circle", let plot.situation = "pounce"
=> "I hit [=>demon] with all my might but my attack just whiffs through the illusionary copy.", plot.plan == "attack", let plot.situation = "illusion"
=> "[^=>demon] sees the vessel, pounces at me in a blind rage.", plot.plan == "bind", let plot.situation = "pounce"
=> "I try and destroy an anchor, only to discover that it is merely an illusion.", plot.plan == "uproot", let plot.situation = "illusion"
=> "[^=>demon] disappears into the shadows when it sees the drain I'm holding.", plot.plan == "drain", let plot.situation = "ambush"
=> "[^=>demon] roars and my wire starts throwing sparks around the room.", plot.plan == "overload", let plot.situation = "glitch"
problem_is_bad
=> "It's bigger than I thought.", plot.demon.type == "brute"
=> "I didn't consider it would be this strong.", plot.demon.type == "brute"
=> "The demonic swarm covers all the walls and even the ceiling.", plot.demon.type == "swarm"
=> "The incessant buzzing drives me insane.", plot.demon.type == "swarm"
=> "A mad electric giggle echoes inside my brain.", plot.demon.type == "trickster"
=> "Phantoms dance at the edges of my vision.", plot.demon.type == "trickster"
problem_is_impossible
=> "How am I going to finish the circle like this?", plot.plan == "circle"
=> "I'm supposed to beat something that powerful? Really?", plot.plan == "attack"
=> "Can anything even hold something that powerful?", plot.plan == "bind"
=> "How am I supposed to break its anchoring like this?", plot.plan == "uproot"
=> "I don't even know if I've grounded the drain correctly.", plot.plan == "drain"
=> "Is this even enough to overload something that powerful?", plot.plan == "overload"
=> "I start to second guess my plan."
phone_rings
=> "I'm throwing darts at the [=>hated_authority]'s picture when the phone rings."
=> "The silence is broken by the ringing of the telephone."
=> "The phone rings."
reward_doesnt_pay
=> "I get no monetary compensation"
=> "It doesn't pay"
=> "I get no money out of this"
rewards
=> "In any case, [^=>employer] compensates me for my troubles.", let plot.compensation, plot.job == "job"
=> "At least [^=>employer] pays me the appropriate fee.", let plot.compensation, plot.job == "job"
=> "In any case, [^=>employer] now owes me one.", plot.job == "favor"
=> "[=>reward_doesnt_pay]. However, [^=>employer] now owes me one.", plot.job == "favor"
=> "[=>reward_doesnt_pay]. At least there's one less [=>demon] haunting the world.", plot.job == "help"
=> "[=>reward_doesnt_pay]. My only reward is the gratitude of [plot.employer.name].", plot.job == "help"
set_up_bag +> let plot.bag_location = =>furniture(plot.site)
=> "I open my bag and set it up on [plot.bag_location]."
=> "I set my bag up on [plot.bag_location]."
silver_lining
=> "Well, it could be worse."
=> "At least I'm still [=>alive]."
=> "At least I'm not [=>dead] yet."
status_change
=> "I'm tossed inside a small room.", plot.situation == "breach", plot.site.interior != null, let plot.situation = "trapped"
=> "I wrestle with [=>demon] and crash into a side room.", plot.situation == "pounce", let plot.situation = "trapped"
=> "I decide to retreat and take off running, with [=>demon] fast behind me.", plot.situation = "menace", let plot.situation = "chased"
=> "I run wildly through the illusions, [=>demon] hot on my tail.", plot.situation == "illusion",let plot.situation = "chased"
=> "[^=>demon] cracks the [=>floor] underneath me and I'm plunged into the darkness below.", plot.situation == "menace", let plot.situation = "darkness"
=> "The electric shocks short the lights and the room is plunged into darkness.", plot.situation == "glitch", let plot.situation = "darkness"
=> "[^=>demon] maims my [plot.injury] with its [=>demon_weapon].", plot.situation == "pounce", let plot.situation = "injured", let plot.injury = =>body_part
=> "I fly through the air and land on my [plot.injury], busting it.", plot.situation == "breach", let plot.situation = "injured", let plot.injury = =>body_part
=> "The illusions fade and I notice my pockets are empty.", plot.situation == "illusion", let plot.situation = "stolen", let plot.stolen
=> "[^=>demon] pounces and then retreats, leaving me confused until I notice my equipment is gone.", plot.situation == "ambush", let plot.situation = "stolen", let plot.stolen
=> "[^=>demon] appears from the shadows, cracking my head and leaving me seeing stars.", plot.situation == "ambush", let plot.situation = "stunned"
=> "I get a shock from the stray electricity that leaves my head reeling.", plot.situation == "glitch", let plot.situation = "stunned"
subplot_intro
=> "Wind howls through the broken [plot.sub.type].", plot.sub == "repair", plot.sub.air != null
=> "The [plot.sub.type] gurgles and clanks ominously.", plot.sub == "repair", plot.sub.water != null
=> "The [plot.sub.type] could use a little work.", plot.sub == "repair"
=> "Unpaid [plot.sub.type] bills are starting to overflow my desk.", plot.sub == "bills"
=> "My [plot.sub.type] are breathing down my neck about those debts though.", plot.sub == "debt"
=> "I feel a pain in my [plot.sub.type]. I think it's infected.", plot.sub == "surgery"
=> "I feel the familiar craving for [plot.sub.type].", plot.sub == "addiction"
=> "I feel a pang of hunger in my stomach.", plot.sub == "hunger"
subplot_problem
=> "It will be bad if I can't get it fixed soon.", plot.sub == "repair"
=> "I wonder how long it will take before they cut me off entirely.", plot.sub == "bills"
=> "I've just gotten my last warning, too.", plot.sub == "debt"
=> "I should get it checked out.", plot.sub == "surgery"
=> "My stash is empty and I desperately need some more.", plot.sub == "addiction"
=> "I'd fill my fridge if I could.", plot.sub == "hunger"
subplot_solution
=> "Problem is, a detective's pay is not exactly luxurious. [=>need_a_job]", plot.sub.money != null
=> "Problem is, I don't exactly have a lot of cash at hand. [=>need_a_job]", plot.sub.money != null
subplot_outro
=> "At least the money should help fix the [plot.sub.type].", plot.sub == "repair", plot.compensation != null
=> "Well, I still need to get that [plot.sub.type] fixed.", plot.sub == "repair", plot.compensation == null
=> "Maybe I'll call in my favor to help fix the [plot.sub.type].", plot.sub == "repair", plot.job == "favor"
=> "I can't pay the bills with good intentions though.", plot.sub == "bills", plot.compensation != null
=> "Maybe I can get [=>employer] to help me with the [plot.sub.type] bills.", plot.sub == "bills", plot.job == "favor"
=> "This should go nicely towards my [plot.sub.type] bills.", plot.sub == "bills", plot.compensation == null
=> "I hope my [plot.sub.type] take credit.", plot.sub == "debt", plot.compensation != null
=> "I'm still neck deep in debt though.", plot.sub == "debt", plot.compensation == null
=> "This should negate my debt nicely.", plot.sub == "debt", plot.job == "favor"
=> "Maybe I'll use the money to go get my [plot.sub.type] checked.", plot.sub == "surgery", plot.compensation != null
=> "My [plot.sub.type] still hurts though.", plot.sub == "surgery", plot.compensation == null
=> "Maybe [=>employer] can help me get my [plot.sub.type] checked.", plot.sub == "surgery", plot.job == "favor"
=> "Time to refill that stash. Oh yeah.", plot.sub == "addiction", plot.compensation != null
=> "I feel the familiar crawl of deprivation. My stash is till empty.", plot.sub == "addiction", plot.compensation == null
=> "I'll have [=>employer] refill my stash.", plot.sub == "addiction", plot.job == "favor"
=> "Now I can fill my larder again.", plot.sub == "hunger", plot.compensation != null
=> "Both my stomach and the larder are still empty though.", plot.sub == "hunger", plot.compensation == null
=> "I'll make [=>employer] make me dinner. It's the least [plot.employer.he] can do.", plot.sub == "hunger", plot.job == "favor"
time_for_work
=> "I snap out of it. Time for work. [^=>demon] won't catch itself."
=> "Okay, enough waxing poetic. [^=>demon] won't catch itself."
tough_case
=> "Already it seems like a tough case."
=> "It sounds bad."
=> "It doesn't seem good."
=> "I feel like this one is going to be a hard one."
victory
=> "I pummel it again and again until it can't hold itself together any more and disintegrates.", plot.plan == "attack"
=> "I quickly perform the rite while it's contained and send it screeching back to hell.", plot.plan == "circle"
=> "I utter words of power and it is bound screeching into the vessel.", plot.plan == "bind"
=> "I finally remove the last anchor binding it to our world and send it screeching back to the collective unconscious.", plot.plan == "uproot"
=> "It screeches unbearably and shrinks in size as its power is drained until it disappears with a fizzle.", plot.plan == "drain"
=> "It screeches and pulses as the energy overloads it, exploding it in a burst of static electricity.", plot.plan == "overload"
wax_on_deduction
=> "Shouldn't be too hard. It's all about the brains, after all.", plot.demon.type == "brute"
=> "The problem is containing the whole swarm. I don't think nobody will sing my praises if I only get rid of half the swarm.", plot.demon.type == "swarm"
=> "I should be able to outsmart it, though. After all, demons don't actually possess the capacity for real thought.", plot.demon.type == "trickster"
wax_on_site
=> "I don't know why, but the thought of a haunted [plot.site.type] always gives me the creeps."
=> "The air is heavy with the sweat and dust of a thousand wasted man-hours.", plot.site.office != null
=> "Here the coroners of justice dissect and diagnose the corpse of law.", plot.site.law != null
=> "The station seems so empty. Only a few homeless people shuffle slowly around the vicinity, lending the place a destitute atmosphere.", plot.site.type == "train station"
=> "I can almost hear the cash register ringing, as full of itself as it is money.", plot.site.store != null
=> "A sad crop of trees surround me, whispering of the dark things they've seen.", plot.site.park != null
=> "The stench of death floats in the air like a persistent miasma.", plot.site.death != null
=> "Tens of thousands of words stare at me from the bookshelves, bound in crumbling leather.", plot.site.books != null
=> "Heavy metal machines though still, show signs of the relentless march of industry.", plot.site.industry != null
=> "The place smells of dried alcohol, vomit and blood.", plot.site.alcohol != null
what_now
=> "What now?"
=> "What do I do now?"
=> "What can I do with this?"
=> "How do I deal with this?"
why_go_on
=> "Sometimes I wonder why the hell am I even doing this job?"